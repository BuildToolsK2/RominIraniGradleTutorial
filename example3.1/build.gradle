//gradle file that will be used for build our projects

//this task is written in Groovy. Print out the project name.
//putting it into the "allprojects" closure means thatit will applt to all the projects
allprojects {
	task hello << {task -> println "I'm $task.project.name"}
}

//the task hello presented above, could be lanched using the command: "gradle -q hello". This command will fire the command in sequence for all the projects.
//in facts is also possible to fire the task for an individual project using specifying the project with this command "gradle -q app:hello" or "gradle -q common:hello" etc..

//remember if you just wish to build the common project you can always invoke the following: "gradle <project-name>:<task-name>",
//for example "gradle api:build"

//by putting those commands inside of the subprojects voice inject common characteristics into each of the sub projects, i.e. "common", "api", "app".
subprojects {

	//the java plugin add several tasks like clean, assemble, build, etc...
	apply plugin: "java"

	repositories {
		mavenCentral()
	}

	dependencies {
		testCompile 'junit:junit:4+'
	}

}


//we want to apply some tasks, plugins, dependencies differently to each project and or one
//or more projects and not all of them
//API Project specific stuff
project(':api') {

	//dependencies related to the COMMON project and some libs
	dependencies {
    compile project(':common')
	  compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'log4j:log4j:1.2.17'
  }

}

//Common Project specific stuff
project(':common') {

   //apply plugin: "java"

   //repositories {
   //	mavenCentral()
   //}

	dependencies {
    compile 'org.apache.commons:commons-lang3:3.3.2'
  }

}

//App Project specific stuff
project(':app') {

	//dependencies related to COMMON and APP projects

	//the compilation dependency on another project is specified via the 'compile project(<projectname>)' statement

	//the compilation dependency on a JAR file is specified via the same mechanism that we saw in Part 2 i.e. 'group:name:version'
	dependencies {
    compile project(':common'), project(':api')
    compile 'log4j:log4j:1.2.17'
	}

}

//note that we have considered only the compile configuration in the build file here.
//You can always target other configurations provided by Java plugin like testCompile, run, testRun and so on

// ** IMPORTANT ** //
//a good practice is actually not to have one single file but to break them into multiple build.gradle files and
//each of these specific build.gradle files will be present in the respective root folders of the 3 projects i.e. app, common and api.

//structure for specific and small build.gradle files. See example3-multiple-build.gradle for a sepcific example
/*
/javaprojects
|- /api
     |- build.gradle
     |- (Java Sources and files)
|- /common
     |- build.gradle
     |- (Java Sources and files)
|- /app
     |- build.gradle
     |- (Java Sources and files)
|- settings.gradle
|- build.gradle
*/
